library(ggplot2)
library(tidyverse)
library(tidytext)
library(stringr)
options(scipen=999)
library(wordcloud2)
library(spgs)
library(rvest)
url <- "https://en.wikipedia.org/wiki/List_of_female_scientists_in_the_20th_century"
html <- read_html(url)
text.all <- html_text(html)
vec_strings<-strsplit(text.all,split = '\n')[[1]]
sic_fem_vec <-vec_strings[47:570]
name_vec <- c(str_extract(sic_fem_vec,".*[0-9]{4}"))
name_vec_1 <- sub(pattern = "born", replacement = "", name_vec)
name_vec_2 <- c(str_extract(name_vec_1,"[^0-9]+"))
name_vec_3 <- c(name_vec_2[!is.na(name_vec_2)])
name_vec_4 <- c(str_extract(name_vec_3,"[^()]+"))
names <- c(str_extract(name_vec_4,"[^,]+"))
new_names <- c(sub(pattern = " ", replacement = "_", names))
new_names_1 <- c(str_extract(new_names,"[^ ]+"))
stringurl <- c(rep("https://en.wikipedia.org/wiki/",489))
names_urls <- str_c(stringurl,new_names_1)
wiki_text_parser <- function(url){
new_paragraphs <- read_html(url) %>% html_nodes("p") %>% html_text()
x = length(new_paragraphs)
new_vec<-c(strsplit(new_paragraphs,split = '\n'))
(t <- paste(new_vec,collapse=""))
t <- c(gsub(pattern = "\"", replacement = "" , t))
return(t)
}
url_2 = "https://en.wikipedia.org/wiki/Katharine_Bartlett"
wiki_text_parser(url_2)
results  <- lapply(names_urls, function(x) try(wiki_text_parser(x)))
is.error <- function(x) inherits(x, "try-error")
succeeded <- !vapply(results, is.error, logical(1))
bio_1 <- c(results[succeeded])
bio_2 <- c(unlist(bio_1))
bio_3 <- sub(pattern = "c(,)", replacement = "" , bio_2)
index <- (str_which(bio_3,"may refer to:"))
bio <- bio_3[-index]
shortest_bio <-  bio[[which.min(str_length(bio))]]
longest_bio <-  bio[[which.max(str_length(bio))]]
find_sic <- str_detect(bio, "astronomer")
astronomer <- bio[which(str_detect(bio, "astronomer"))]
astronomer_son_statistician <- astronomer[which(str_detect(astronomer, "distinguished"))]
astronomer_son_statistician_1 <- astronomer_son_statistician[which(str_detect(astronomer_son_statistician, "probability"))]
astronomer_son_statistician_1[[2]]
clear_bio <- gsub("[[:punct:]]", '', bio)
clear_bio <- gsub("[[:digit:]]", '', clear_bio)
word_counts <- as.data.frame(table(unlist( strsplit(clear_bio, "\ ") )))
word_counts <- with(word_counts, word_counts[ Var1 != "", ] )
stopwords <- stop_words
names(word_counts)[1] <- 'word'
word_counts %<>% filter(!grepl("[^A-Za-z]", .data$word) &
!(tolower(.data$word) %in% stopwords$word) &
!str_starts(.data$word, "#") &
!str_starts(.data$word, '@') &
.data$word != 'â€“') %>% arrange(desc(.data$Freq))
top_words <- word_counts %>% head(100)
wordcloud2(data=top_words, size = 0.4, shape = 'pentagon',gridSize=10 )
upper_bio <- toupper(bio)
letter_counts <- as.data.frame(table(unlist( strsplit(upper_bio, "") )))
letter_counts <- with(letter_counts, letter_counts[ Var1 != "", ] )
names(letter_counts)[1] <- 'letter'
ABC = c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q",
"R","S","T","U","V","W","X","Y","Z")
vec_name <- names(letter_counts)
m = matrix(0,1,2)
new_data8 <- data.frame(m)
names(new_data8) <- c(vec_name)
for (i in 1:26){
new_data <- filter(letter_counts,letter == ABC[i])
new_data8 <- rbind(new_data8,new_data)}
new_data8 <- new_data8[2:27,]
new_data8$Freq <- new_data8$Freq/sum(new_data8$Freq)
new_data8$Freq <- round(new_data8$Freq,4)
new_data8_s <- new_data8 %>% arrange(desc(Freq))
p<-ggplot(new_data8_s, aes(x=letter, y=Freq, fill=Freq)) +
geom_bar(stat="identity")
p
letter_counts_9 <- ((unlist( strsplit(upper_bio, "") )))
pair_letter_counts_9 <- pair.counts(letter_counts_9, case=c("upper"), circular=FALSE)
pair_letter_counts_9d <- data.frame(pair_letter_counts_9)
pair_letter_counts_9A <- pair_letter_counts_9d[c(ABC)]
pair_letter_counts_9B <- pair_letter_counts_9A[c(ABC), ]
most_freq_pair_ind <- which(pair_letter_counts_9B==max(pair_letter_counts_9B), arr.ind=T)
names(pair_letter_counts_9B)[most_freq_pair_ind[1]]
names(pair_letter_counts_9B)[most_freq_pair_ind[2]]
least_freq_pair_ind <- which(pair_letter_counts_9B==min(pair_letter_counts_9B), arr.ind=T)
letter_counts_9 <- ((unlist( strsplit(upper_bio, "") )))
pair_letter_counts_9 <- pair.counts(letter_counts_9, case=c("upper"), circular=FALSE)
pair_letter_counts_9d <- data.frame(pair_letter_counts_9)
pair_letter_counts_9A <- pair_letter_counts_9d[c(ABC)]
pair_letter_counts_9B <- pair_letter_counts_9A[c(ABC), ]
most_freq_pair_ind <- which(pair_letter_counts_9B==max(pair_letter_counts_9B), arr.ind=T)
names(pair_letter_counts_9B)[most_freq_pair_ind[1]]
names(pair_letter_counts_9B)[most_freq_pair_ind[2]]
least_freq_pair_ind <- which(pair_letter_counts_9B==min(pair_letter_counts_9B), arr.ind=T)
find_a <- function(bio_2){
upper_bio <- toupper(bio_2)
a_counts <- as.data.frame(table(unlist( strsplit(upper_bio, "") )))
a_counts <- with(a_counts, a_counts[ Var1 != "", ] )
names(a_counts)[1] <- 'a'
ABC = c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q",
"R","S","T","U","V","W","X","Y","Z")
vec_name <- names(a_counts)
m = matrix(0,1,2)
new_data10 <- data.frame(m)
names(new_data10)[1:2] <- c(vec_name)
for (i in 1:26){
new_data10a <- filter(a_counts,a == ABC[i])
new_data10 <- rbind(new_data10,new_data10a)}
new_data10$leght_bio <- sum(new_data10$Freq)
new_data10$Freq <- new_data10$Freq/sum(new_data10$Freq)
new_data10$Freq <- round(new_data10$Freq,4)
new_data10 <- new_data10[2,]
return(new_data10)}
d = matrix(0,1,3)
p_hat_ta <- data.frame(d)
names(p_hat_ta) <- c("a","Freq","leght_bio")
for (p in 1:360){
p_hat_ta <- rbind (p_hat_ta,find_a(bio[p]))
}
p_hat_ta <- p_hat_ta[2:361,]
p_10 <- ggplot(data=p_hat_ta, aes(Freq)) +
geom_histogram(breaks=seq(0.05, 0.125, by=0.0015),fill="green")+geom_vline(aes(xintercept = 0.0852), colour="red")+ggtitle("freq of p_hat of A")
p_10
p_hat_ta$absolute_error <- abs(0.0852-p_hat_ta$Freq)
p_10_1 <- ggplot(data = p_hat_ta, aes(x = absolute_error, y = leght_bio))
p_10_1 + geom_point(data = p_hat_ta, color = "blue") +ggtitle("freq of dif of P and P hat")
p_hat_ta$piid <- 0
p_hat_ta$sd <- 0
for (s in 1:360){
poll = sample(ABC, p_hat_ta$leght_bio[s], prob= new_data8_s$Freq, replace = TRUE)
p_hat_ta$piid[s] <-  round((length (poll[which(poll=="A")]))/(p_hat_ta$leght_bio[s]),4)
p_hat_ta$sd[s] <- round((sqrt((p_hat_ta$piid[s])*(1-p_hat_ta$piid[s]))/(sqrt(p_hat_ta$leght_bio[s]))),4)
}
p_10_B <- ggplot(data=p_hat_ta, aes(sd)) +
geom_histogram(breaks=seq(0, 0.018, by=0.00036),fill="orange")+ggtitle("p hat iid sd")
p_10_B
find_a <- function(bio_2){
upper_bio <- toupper(bio_2)
a_counts <- as.data.frame(table(unlist( strsplit(upper_bio, "") )))
a_counts <- with(a_counts, a_counts[ Var1 != "", ] )
names(a_counts)[1] <- 'a'
ABC = c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q",
"R","S","T","U","V","W","X","Y","Z")
vec_name <- names(a_counts)
m = matrix(0,1,2)
new_data10 <- data.frame(m)
names(new_data10)[1:2] <- c(vec_name)
for (i in 1:26){
new_data10a <- filter(a_counts,a == ABC[i])
new_data10 <- rbind(new_data10,new_data10a)}
new_data10$leght_bio <- sum(new_data10$Freq)
new_data10$Freq <- new_data10$Freq/sum(new_data10$Freq)
new_data10$Freq <- round(new_data10$Freq,4)
new_data10 <- new_data10[2,]
return(new_data10)}
d = matrix(0,1,3)
p_hat_ta <- data.frame(d)
names(p_hat_ta) <- c("a","Freq","leght_bio")
for (p in 1:360){
p_hat_ta <- rbind (p_hat_ta,find_a(bio[p]))
}
p_hat_ta <- p_hat_ta[2:361,]
p_10 <- ggplot(data=p_hat_ta, aes(Freq)) +
geom_histogram(breaks=seq(0.05, 0.125, by=0.0015),fill="green")+geom_vline(aes(xintercept = 0.0852), colour="red")+ggtitle("freq of p_hat of A")
p_10
p_hat_ta$absolute_error <- abs(0.0852-p_hat_ta$Freq)
p_10_1 <- ggplot(data = p_hat_ta, aes(x = absolute_error, y = leght_bio))
p_10_1 + geom_point(data = p_hat_ta, color = "blue") +ggtitle("freq of dif of P and P hat")
p_hat_ta$piid <- 0
p_hat_ta$sd <- 0
for (s in 1:360){
poll = sample(ABC, p_hat_ta$leght_bio[s], prob= new_data8_s$Freq, replace = TRUE)
p_hat_ta$piid[s] <-  round((length (poll[which(poll=="A")]))/(p_hat_ta$leght_bio[s]),4)
p_hat_ta$sd[s] <- round((sqrt((p_hat_ta$piid[s])*(1-p_hat_ta$piid[s]))/(sqrt(p_hat_ta$leght_bio[s]))),4)
}
p_10_B <- ggplot(data=p_hat_ta, aes(sd)) +
geom_histogram(breaks=seq(0, 0.018, by=0.00036),fill="orange")+ggtitle("p hat iid sd")
p_10_B
vec_4_words = rep(0,10000)
for(k in 1:10000){
vec_4_words[k] = paste(sample(size = 4, x =ABC,prob= new_data8$Freq,replace = TRUE) , collapse="")}
English_words_dictionary <- data.frame(read.table(url("https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt")))
names(English_words_dictionary) <- "word"
df_word4_l <- data.frame(tolower(vec_4_words))
names(df_word4_l) <- "word"
word_in_dict <-  merge(x = df_word4_l, y = English_words_dictionary, by = "word")
l
vec_4_words = rep(0,10000)
for(k in 1:10000){
vec_4_words[k] = paste(sample(size = 4, x =ABC,prob= new_data8$Freq,replace = TRUE) , collapse="")}
English_words_dictionary <- data.frame(read.table(url("https://raw.githubusercontent.com/dwyl/english-words/master/words_alpha.txt")))
names(English_words_dictionary) <- "word"
df_word4_l <- data.frame(tolower(vec_4_words))
names(df_word4_l) <- "word"
word_in_dict <-  merge(x = df_word4_l, y = English_words_dictionary, by = "word")
prob_10 <- length(word_in_dict$word)
prob_12 <- length(word_in_dict_p$word)
df12 <- data.frame(matrix(0,1,3))
names(df12) <- c("letter1","letter2","Freq")
for (g in 1:26){
for (t in 1:26){
new_data12a <- c(
tolower(names(pair_letter_counts_9B)[g]), tolower(names(pair_letter_counts_9B)[t]), pair_letter_counts_9B[g,t]/sum(pair_letter_counts_9B[g,]))
df12 <- rbind(df12,new_data12a)
}}
df12$Freq <- as.numeric(df12$Freq)
df12$Freq <- round(df12$Freq,4)
df_pair <- df12[2:677, ]
one_letter_p <- select(new_data8,letter,Freq)
one_letter_p$letter = tolower(one_letter_p$letter)
vec_4_words_2 = rep(0,40000)
for(k in 1:40000){
if (k==1%%4){
vec_4_words_2[k] = paste(sample(size = 1, x =one_letter_p$letter,prob= one_letter_p$Freq,replace = TRUE)) }
else{
filterdf12 <- filter(df_pair,letter1 == vec_4_words_2[k-1])
vec_4_words_2[k]= paste(sample(size = 1, x =filterdf12$letter2, prob= filterdf12$Freq,replace = TRUE))
}}
word_4_letter_vec <- rep(0,10000)
for (x in 1:10000){
word_4_letter_vec[x] <- paste0(vec_4_words_2[(4*(x-1))+1],vec_4_words_2[(4*(x-1))+2],vec_4_words_2[(4*(x-1))+3],vec_4_words_2[(4*(x-1))+4])}
df_word4_l_p <- data.frame((word_4_letter_vec))
names(df_word4_l_p) <- "word"
word_in_dict_p <-  merge(x = df_word4_l_p, y = English_words_dictionary, by = "word")
prob_12 <- length(word_in_dict_p$word)
vec_2_words = rep(0,40000)
for(k in 1:40000){
vec_2_words[k] = paste(sample(size = 1, x =word_counts$word,prob= word_counts$Freq,replace = TRUE))}
vec_2_words_1 = vec_2_words[seq(1,39999 ,by=2)]
vec_2_words_2 = vec_2_words[seq(2,40000 ,by=2)]
df_13 <- data.frame(vec_2_words_1,vec_2_words_2)
names(df_13)= c("word1","word2")
filter_same_word = filter(df_13,word1==word2)
prob_13 <- length(filter_same_word$word)
View(filter_same_word)
prob_13 <- length(filter_same_word$word1)
word_sen = c("Maria", "Sklodowska", "Curie",  "Pierre",  "Curie", "Irene", "Joliot", "Curie")
vec_sen_words = rep(0,400000)
for(k in 1:50000){
vec_sen_words[((8*(k-1))+1):((8*(k-1))+8)] = paste(sample(size = 8, x =word_sen,replace = FALSE))}
word_8_sen_vec <- rep(0,50000)
for (x in 1:50000){
word_8_sen_vec[x] <- paste(vec_sen_words[((8*(x-1))+1)],vec_sen_words[((8*(x-1))+2)],vec_sen_words[((8*(x-1))+3)],vec_sen_words[((8*(x-1))+4)],vec_sen_words[((8*(x-1))+5)],vec_sen_words[((8*(x-1))+6)],vec_sen_words[((8*(x-1))+7)],vec_sen_words[((8*(x-1))+8)])}
df_14 <- data.frame(word_8_sen_vec)
names(df_14) <- "sen"
fiter_df_14 <- filter(df_14, sen=="Maria Sklodowska Curie Pierre Curie Irene Joliot Curie"|sen=="Pierre Curie Maria Sklodowska Curie Irene Joliot Curie"|sen=="Irene Joliot Curie Pierre Curie Maria Sklodowska Curie"|sen=="Maria Sklodowska Curie Irene Joliot Curie Pierre Curie"|sen=="Pierre Curie Irene Joliot Curie Maria Sklodowska Curie"|sen=="Irene Joliot Curie Maria Sklodowska Curie Pierre Curie")
prob_14 <- length(fiter_df_14$sen)
vec_Rosalind_Franklin = rep(0,800000)
abc= tolower(ABC)
for(k in 1:50000){
vec_Rosalind_Franklin[((16*(k-1))+1):((16*(k-1))+16)] = paste(sample(size = 16, x =abc,replace = TRUE))}
vec_Rosalind_Franklin_1 <- rep(0,50000)
for (x in 1:50000){
vec_Rosalind_Franklin_1[x] <- paste(paste0(toupper(vec_Rosalind_Franklin[((16*(x-1))+1)]),vec_Rosalind_Franklin[((16*(x-1))+2)],vec_Rosalind_Franklin[((16*(x-1))+3)],vec_Rosalind_Franklin[((16*(x-1))+4)],vec_Rosalind_Franklin[((16*(x-1))+5)],vec_Rosalind_Franklin[((16*(x-1))+6)],vec_Rosalind_Franklin[((16*(x-1))+7)],vec_Rosalind_Franklin[((16*(x-1))+8)]),paste0(toupper(vec_Rosalind_Franklin[((16*(x-1))+9)]),vec_Rosalind_Franklin[((16*(x-1))+10)],vec_Rosalind_Franklin[((16*(x-1))+11)],vec_Rosalind_Franklin[((16*(x-1))+12)],vec_Rosalind_Franklin[((16*(x-1))+13)],vec_Rosalind_Franklin[((16*(x-1))+14)],vec_Rosalind_Franklin[((16*(x-1))+15)],vec_Rosalind_Franklin[((16*(x-1))+16)]))}
df_15 <- data.frame(vec_Rosalind_Franklin_1)
names(df_15) <- "words_Rosalind_Franklin"
filter_Rosalind_Franklin <- filter(df_15,words_Rosalind_Franklin=="Rosalind Franklin")
prob_15a <- length(filter_Rosalind_Franklin$words_Rosalind_Franklin)
new_data15 <- new_data8
new_data15$letter <- tolower(new_data15$letter)
vec_Rosalind_Franklin_p = rep(0,800000)
for(k in 1:50000){
vec_Rosalind_Franklin_p[((16*(k-1))+1):((16*(k-1))+16)] = paste(sample(size = 16, x =new_data15$letter,prob=new_data15$Freq, replace = TRUE))}
vec_Rosalind_Franklin_p_1 <- rep(0,50000)
for (x in 1:50000){
vec_Rosalind_Franklin_p_1[x] <- paste(paste0(toupper(vec_Rosalind_Franklin_p[((16*(x-1))+1)]),vec_Rosalind_Franklin_p[((16*(x-1))+2)],vec_Rosalind_Franklin_p[((16*(x-1))+3)],vec_Rosalind_Franklin_p[((16*(x-1))+4)],vec_Rosalind_Franklin_p[((16*(x-1))+5)],vec_Rosalind_Franklin_p[((16*(x-1))+6)],vec_Rosalind_Franklin_p[((16*(x-1))+7)],vec_Rosalind_Franklin_p[((16*(x-1))+8)]),paste0(toupper(vec_Rosalind_Franklin_p[((16*(x-1))+9)]),vec_Rosalind_Franklin_p[((16*(x-1))+10)],vec_Rosalind_Franklin_p[((16*(x-1))+11)],vec_Rosalind_Franklin_p[((16*(x-1))+12)],vec_Rosalind_Franklin_p[((16*(x-1))+13)],vec_Rosalind_Franklin_p[((16*(x-1))+14)],vec_Rosalind_Franklin_p[((16*(x-1))+15)],vec_Rosalind_Franklin_p[((16*(x-1))+16)]))}
df_15_p <- data.frame(vec_Rosalind_Franklin_p_1)
names(df_15_p) <- "words_Rosalind_Franklin"
filter_Rosalind_Franklin_p <- filter(df_15_p,words_Rosalind_Franklin=="Rosalind Franklin")
prob_15b <- length(filter_Rosalind_Franklin_p$words_Rosalind_Franklin)
